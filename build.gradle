def webprojects = [project(':c3-sample-web'), project(':c3-base-menu'), project(':c3-base-log'), project(':c3-base-file')]
//def jobprojects = [project(':emis-das-app')]

buildscript {
    repositories {
        //配置仓库
        maven { url "http://repo.spring.io/libs-snapshot" }
        //配置gradle templates仓库
        maven { url 'http://dl.bintray.com/cjstehno/public'}
        //配置gradle.git.properties
        maven { url "https://plugins.gradle.org/m2/"}
        mavenCentral()
        jcenter()
    }
    
    dependencies {
        //创建gradle构建模板
        classpath 'gradle-templates:gradle-templates:1.5'
        
        //添加spring boot gradle插件
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
        
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.11'
        classpath 'org.hidetake:gradle-ssh-plugin:1.5.1'
    }
}

apply plugin:'templates'


allprojects {
    apply plugin: "java"
    //apply plugin: "idea"
    apply plugin: "maven"
    

    //idea.module {
        //excludeDirs += [
                //file('bin'),      // containing build artifacts from Eclipse (if any)
                //file('work'),     // containing transient artifacts used by embedded Tomcat
                //file('logs'),     // containing app logs written by embedded Tomcat
                //file('data'),     // containing logs and data written by elasticsearch
                //file('.settings') // containing intentionally checked-in Eclipse metadata
        //]
    //}

    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenCentral()
        jcenter()
    }
    
    configurations {
        compile.exclude module: "ch.qos.logback"
        compile.exclude module: "org.slf4j"
    }

}

subprojects {
    apply plugin: 'application'
    apply plugin: 'spring-boot'
    apply plugin: 'java'
    //eclipse web tool platform
    apply plugin: 'eclipse-wtp'

    group = 'com.c3.travel'
    version = travel_version

    eclipse {
        classpath {
            downloadSources = true
            defaultOutputDir = file("build/classes/main") //file(project.getProjectDir().getAbsolutePath() + "/build/classes/main")
            //containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            //containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${java_version}"
        }
    }

    bootRepackage.enabled = false

    mainClassName  = 'com.c3.Application'

    //jdk版本
    sourceCompatibility = java_version
    targetCompatibility = java_version

    ext {
        //配置编码
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
    }
    
 
    dependencies {
        
        compile("org.springframework.boot:spring-boot-starter")
        //compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-data-jpa"){
          exclude group: 'org.apache.tomcat', module:'tomcat-jdbc'
        }
        //compile("org.springframework.boot:spring-boot-devtools")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        testCompile("org.springframework.boot:spring-boot-starter-test")

        compile("org.springframework:spring-context-support")

        compile "net.sf.ehcache:ehcache:${ehcache_version}"

        //用于处理date，time，calendar的工具包
        compile "joda-time:joda-time:${joda_time_version}"
        
        //service provider interface for hibernate, joda time 
        compile("org.jadira.usertype:usertype.core:${usertype_core_version}"){
          exclude group: 'org.slf4j', module: 'slf4j-api'
          exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
        }

        //google java core library
        compile "com.google.guava:guava:${google_guava_version}"
        
        //新的依赖注入,提供@Inject等注入
        compile "javax.inject:javax.inject:${javax_inject_version}"

        compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
        compile "commons-lang:commons-lang:${commons_lang_version}"
        compile "commons-io:commons-io:${commons_io_version}"
        
        //文件上传与下载
        compile("commons-fileupload:commons-fileupload:${commons_fileupload_version}"){
          exclude group: 'commons-io', module: 'commons-io'
        }
        
        //用于编码与解码，支持DES，SHA，MD5，Base64等
        compile "commons-codec:commons-codec:${commons_codec_version}"
        //compile "org.apache.commons:commons-csv:${commons_csv_version}"

        //阿里开源数据库连接池
        compile "com.alibaba:druid:${druid_version}"
       

        //compile "mysql:mysql-connector-java:${mysql_version}"
        
        //postgresql数据库连接
        compile "org.postgresql:postgresql:${postgresql_version}"

        //compile "net.sourceforge.javacsv:javacsv:${javacsv_version}"
        //compile("com.opencsv:opencsv:${opencsv_version}"){
          //exclude group: 'org.apache.commons', module: 'commons-lang3'
        //}
    }
}

configure(webprojects) { project ->
  //可以独立发布到第三方容器中
  apply plugin: 'war'
  //apply plugin: "com.gorylenko.gradle-git-properties"
  //apply plugin: 'org.hidetake.ssh'
  bootRepackage.enabled = true
  
  springBoot {
      executable = true
  }

  bootRepackage.enabled = true

  configurations {
    providedRuntime
    //all*.exclude group: '', module: 'servlet-api'
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-undertow'
  }

  dependencies {
    //必须使用providedRuntime
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    //providedRuntime("org.springframework.boot:spring-boot-starter-undertow"){
      //exclude group: 'javax.servlet', module: 'javax.servlet-api'
    //}
    compile("org.springframework.boot:spring-boot-starter-freemarker"){
      exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
      exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-el'
    }
    compile("org.springframework.boot:spring-boot-starter-web"){
    }

    //compile "org.apache.shiro:shiro-spring:${shiro_version}"
    //compile "org.apache.shiro:shiro-ehcache:${shiro_version}"

    compile "org.htmlparser:htmlparser:${htmlparser_version}"

    //compile("com.baidu.ueditor:ueditor:${ueditor_version}"){
      //exclude group: 'commons-fileupload', module: 'commons-fileupload'
      //exclude group: 'commons-codec', module: 'commons-codec'
    //}
    //compile "ueditor:json:${ueditor_json_version}"
  }
}

